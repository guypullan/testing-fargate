{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation template to create a new ECS Fargate First Run stack",
  "Parameters": {
    "EcsAmiId": {
      "Type": "String",
      "Description": "ECS AMI Id"
    },
    "ImageId": {
      "Type": "String",
      "Description": "image id required by cosmos"
    },
    "EcsInstanceType": {
      "Type": "String",
      "Description": "ECS EC2 instance type",
      "Default": "t2.micro",
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "KeyName": {
      "Type": "String",
      "Description": "Optional - Name of an existing EC2 KeyPair to enable SSH access to the ECS instances",
      "Default": ""
    },
    "AsgMaxSize": {
      "Type": "Number",
      "Description": "Maximum size and initial Desired Capacity of ECS Auto Scaling Group",
      "Default": "1"
    },
    "IamRoleInstanceProfile": {
      "Type": "String",
      "Description": "Name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance"
    },
    "EcsClusterName": {
      "Type": "String",
      "Description": "ECS Cluster Name",
      "Default": "default"
    },
    "EcsPort": {
      "Type": "String",
      "Description": "Optional - Security Group port to open on ECS instances - defaults to port 80",
      "Default": "80"
    },
    "ElbPort": {
      "Type": "String",
      "Description": "Optional - Security Group port to open on ELB - port 80 will be open by default",
      "Default": "80"
    },
    "ElbHealthCheckTarget": {
      "Type": "String",
      "Description": "Optional - Health Check Target for ELB - defaults to HTTP:80/",
      "Default": "HTTP:80/"
    },
    "TargetGroupName": {
      "Type": "String",
      "Description": "The target group name",
      "Default": "ECSFirstRunTargetGroup"
    },
    "SourceCidr": {
      "Type": "String",
      "Description": "Optional - CIDR/IP range for EcsPort and ElbPort - defaults to 0.0.0.0/0",
      "Default": "0.0.0.0/0"
    },
    "EcsEndpoint": {
      "Type": "String",
      "Description": "Optional - ECS Endpoint for the ECS Agent to connect to",
      "Default": ""
    },
    "CreateElasticLoadBalancer": {
      "Type": "String",
      "Description": "Optional - When set to true, creates a ELB for ECS Service",
      "Default": "false"
    },
    "VpcAvailabilityZones": {
      "Type": "CommaDelimitedList",
      "Description": "Optional - Comma-delimited list of two VPC availability zones in which to create subnets",
      "Default": ""
    },
    "VpcCidrBlock": {
      "Type": "String",
      "Description": "Optional - CIDR/IP range for the VPC",
      "Default": "10.0.0.0/16"
    },
    "SubnetCidrBlock1": {
      "Type": "String",
      "Description": "Optional - CIDR/IP range for the VPC",
      "Default": "10.0.0.0/24"
    },
    "SubnetCidrBlock2": {
      "Type": "String",
      "Description": "Optional - CIDR/IP range for the VPC",
      "Default": "10.0.1.0/24"
    },
    "IsFargate": {
      "Type": "String",
      "Description": "Optional - Whether to launch instances and create auto scaling group.",
      "Default": "true"
    },
    "TargetType": {
      "Type": "String",
      "Description": "Optional - the ALB target group target type, defaults to ip",
      "Default": "ip"
    }
  },
  "Conditions": {
    "SetEndpointToECSAgent": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            { "Ref": "ECSEndpoint" },
            ""
          ]
        }
      ]
    },
    "CreateELB": {
      "Fn::Equals": [
        { "Ref": "CreateElasticLoadBalancer" },
        ""
      ]
    },
    "CreateEC2LCWithKeyPair": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            { "Ref": "KeyName" },
            ""
          ]
        }
      ]
    },
    "UseSpecifiedVpcAvailabilityZones": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            { "Fn::Join": [ ",", { "Fn::ImportValue": "VpcAvailablityZones" } ] },
            ""
          ]
        }
      ]
    },
    "LaunchInstances": {
      "Fn::Equals": [
        { "Ref": "IsFargate" },
        "false"
      ]
    }
  },
  "Resources": {
    "EcsInstanceLc": {
      "Condition": "LaunchInstances",
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": "EcsAmiId",
        "InstanceType": "EcsInstanceType",
        "AssociatePublicIpAddress": true,
        "IamInstanceProfile": "IamRoleInstanceProfile",
        "KeyName": [
          "CreateEC2LCWithKeyPair",
          "KeyName",
          "AWS::NoValue"
        ],
        "SecurityGroups": [
          "EcsSecurityGroup"
        ],
        "UserData": [
          "SetEndpointToECSAgent",
          {
            "Fn::Join": [
              ",",
              [
                "#!/bin/bash\n",
                "echo ECS_CLUSTER=",
                "EcsClusterName",
                " >> /etc/ecs/ecs.config",
                "\necho ECS_BACKEND_HOST=",
                "EcsEndpoint",
                " >> /etc/ecs/ecs.config"
              ]
            ]
          },
          {
            "Fn::Join": [
              ",",
              [
                "#!/bin/bash\n",
                "echo ECS_CLUSTER=",
                "EcsClusterName",
                " >> /etc/ecs/ecs.config"
              ]
            ]
          }
        ]
      }
    },
    "EcsInstanceAsg": {
      "Condition": "LaunchInstances",
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": [
          [
            ",",
            [
              "PublicSubnetAz1",
              "PublicSubnetAz2"
            ]
          ]
        ],
        "LaunchConfigurationName": "EcsInstanceLc",
        "MinSize": "0",
        "MaxSize": "AsgMaxSize",
        "DesiredCapacity": "AsgMaxSize",
        "Tags": [
          {
            "Key": "Name",
            "Value": [
              "",
              [
                "ECS Instance - ",
                "AWS::StackName"
              ]
            ],
            "PropagateAtLaunch": "true"
          }
        ]
      }
    }
  }
}
